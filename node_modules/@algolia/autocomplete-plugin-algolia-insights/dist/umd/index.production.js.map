{"version":3,"file":"index.production.js","sources":["../../../autocomplete-shared/dist/esm/debounce.js","../../../autocomplete-shared/dist/esm/isEqual.js","../../../autocomplete-shared/dist/esm/noop.js","../../src/createClickedEvent.ts","../../src/createSearchInsightsApi.ts","../../src/isModernInsightsClient.ts","../../src/createViewedEvents.ts","../../src/isAlgoliaInsightsHit.ts","../../src/createAlgoliaInsightsPlugin.ts","../../../autocomplete-shared/dist/esm/safelyRunOnBrowser.js","../../../autocomplete-shared/dist/esm/createRef.js"],"sourcesContent":["export function debounce(fn, time) {\n  var timerId = undefined;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(function () {\n      return fn.apply(void 0, args);\n    }, time);\n  };\n}","function isPrimitive(obj) {\n  return obj !== Object(obj);\n}\nexport function isEqual(first, second) {\n  if (first === second) {\n    return true;\n  }\n  if (isPrimitive(first) || isPrimitive(second) || typeof first === 'function' || typeof second === 'function') {\n    return first === second;\n  }\n  if (Object.keys(first).length !== Object.keys(second).length) {\n    return false;\n  }\n  for (var _i = 0, _Object$keys = Object.keys(first); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (!(key in second)) {\n      return false;\n    }\n    if (!isEqual(first[key], second[key])) {\n      return false;\n    }\n  }\n  return true;\n}","export var noop = function noop() {};","import type {\n  AlgoliaInsightsHit,\n  ClickedObjectIDsAfterSearchParams,\n  InsightsParamsWithItems,\n} from './types';\n\ntype CreateClickedEventParams = {\n  item: AlgoliaInsightsHit;\n  items: AlgoliaInsightsHit[];\n};\n\nexport function createClickedEvent({\n  item,\n  items = [],\n}: CreateClickedEventParams): Omit<\n  InsightsParamsWithItems<ClickedObjectIDsAfterSearchParams>,\n  'eventName'\n> & { algoliaSource?: string[] } {\n  return {\n    index: item.__autocomplete_indexName,\n    items: [item],\n    positions: [1 + items.findIndex((x) => x.objectID === item.objectID)],\n    queryID: item.__autocomplete_queryID,\n    algoliaSource: ['autocomplete'],\n  };\n}\n","import type { InsightsMethodMap } from 'search-insights';\n\nimport { isModernInsightsClient } from './isModernInsightsClient';\nimport {\n  AlgoliaInsightsHit,\n  ClickedFiltersParams,\n  ClickedObjectIDsAfterSearchParams,\n  ClickedObjectIDsParams,\n  ConvertedFiltersParams,\n  ConvertedObjectIDsAfterSearchParams,\n  ConvertedObjectIDsParams,\n  InsightsClient,\n  InsightsClientMethod,\n  WithArbitraryParams,\n  InsightsParamsWithItems,\n  ViewedFiltersParams,\n  ViewedObjectIDsParams,\n} from './types';\n\nfunction chunk<TItem extends { objectIDs: string[] }>(\n  item: TItem,\n  chunkSize: number = 20\n): TItem[] {\n  const chunks: TItem[] = [];\n  for (let i = 0; i < item.objectIDs.length; i += chunkSize) {\n    chunks.push({\n      ...item,\n      objectIDs: item.objectIDs.slice(i, i + chunkSize),\n    });\n  }\n  return chunks;\n}\n\nfunction mapToInsightsParamsApi<\n  TInsightsParamsType extends {\n    items: AlgoliaInsightsHit[];\n    objectIDs?: string[];\n  }\n>(params: TInsightsParamsType[]) {\n  return params.map(({ items, ...param }) => ({\n    ...param,\n    objectIDs: items?.map(({ objectID }) => objectID) || param.objectIDs,\n  }));\n}\n\nexport function createSearchInsightsApi(searchInsights: InsightsClient) {\n  const canSendHeaders = isModernInsightsClient(searchInsights);\n\n  function sendToInsights<TInsightsMethod extends InsightsClientMethod>(\n    method: InsightsClientMethod,\n    payloads: InsightsMethodMap[TInsightsMethod],\n    items?: AlgoliaInsightsHit[]\n  ) {\n    if (canSendHeaders && typeof items !== 'undefined') {\n      const { appId, apiKey } = items[0].__autocomplete_algoliaCredentials;\n      const headers = {\n        'X-Algolia-Application-Id': appId,\n        'X-Algolia-API-Key': apiKey,\n      };\n\n      searchInsights(method, ...payloads, { headers });\n    } else {\n      searchInsights(method, ...payloads);\n    }\n  }\n\n  return {\n    /**\n     * Initializes Insights with Algolia credentials.\n     */\n    init(appId: string, apiKey: string) {\n      searchInsights('init', { appId, apiKey });\n    },\n    /**\n     * Sets the user token to attach to events.\n     */\n    setUserToken(userToken: string) {\n      searchInsights('setUserToken', userToken);\n    },\n    /**\n     * Sends click events to capture a query and its clicked items and positions.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-object-ids-after-search/\n     */\n    clickedObjectIDsAfterSearch(\n      ...params: Array<\n        WithArbitraryParams<\n          InsightsParamsWithItems<ClickedObjectIDsAfterSearchParams>\n        >\n      >\n    ) {\n      if (params.length > 0) {\n        sendToInsights(\n          'clickedObjectIDsAfterSearch',\n          mapToInsightsParamsApi<\n            InsightsParamsWithItems<ClickedObjectIDsAfterSearchParams>\n          >(params),\n          params[0].items\n        );\n      }\n    },\n    /**\n     * Sends click events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-object-ids/\n     */\n    clickedObjectIDs(\n      ...params: Array<\n        WithArbitraryParams<InsightsParamsWithItems<ClickedObjectIDsParams>>\n      >\n    ) {\n      if (params.length > 0) {\n        sendToInsights(\n          'clickedObjectIDs',\n          mapToInsightsParamsApi<\n            InsightsParamsWithItems<ClickedObjectIDsParams>\n          >(params),\n          params[0].items\n        );\n      }\n    },\n    /**\n     * Sends click events to capture the filters a user clicks on.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-filters/\n     */\n    clickedFilters(\n      ...params: Array<WithArbitraryParams<ClickedFiltersParams>>\n    ) {\n      if (params.length > 0) {\n        searchInsights('clickedFilters', ...params);\n      }\n    },\n    /**\n     * Sends conversion events to capture a query and its clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-object-ids-after-search/\n     */\n    convertedObjectIDsAfterSearch(\n      ...params: Array<\n        WithArbitraryParams<\n          InsightsParamsWithItems<ConvertedObjectIDsAfterSearchParams>\n        >\n      >\n    ) {\n      if (params.length > 0) {\n        sendToInsights(\n          'convertedObjectIDsAfterSearch',\n          mapToInsightsParamsApi<\n            InsightsParamsWithItems<ConvertedObjectIDsAfterSearchParams>\n          >(params),\n          params[0].items\n        );\n      }\n    },\n    /**\n     * Sends conversion events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-object-ids/\n     */\n    convertedObjectIDs(\n      ...params: Array<\n        WithArbitraryParams<InsightsParamsWithItems<ConvertedObjectIDsParams>>\n      >\n    ) {\n      if (params.length > 0) {\n        sendToInsights(\n          'convertedObjectIDs',\n          mapToInsightsParamsApi<\n            InsightsParamsWithItems<ConvertedObjectIDsParams>\n          >(params),\n          params[0].items\n        );\n      }\n    },\n    /**\n     * Sends conversion events to capture the filters a user uses when converting.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-filters/\n     */\n    convertedFilters(\n      ...params: Array<WithArbitraryParams<ConvertedFiltersParams>>\n    ) {\n      if (params.length > 0) {\n        searchInsights('convertedFilters', ...params);\n      }\n    },\n    /**\n     * Sends view events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/viewed-object-ids/\n     */\n    viewedObjectIDs(\n      ...params: Array<\n        WithArbitraryParams<InsightsParamsWithItems<ViewedObjectIDsParams>>\n      >\n    ) {\n      if (params.length > 0) {\n        params\n          .reduce<\n            Array<{\n              items?: AlgoliaInsightsHit[];\n              payload: ViewedObjectIDsParams;\n            }>\n          >(\n            (acc, { items, ...param }) => [\n              ...acc,\n              ...chunk<ViewedObjectIDsParams>({\n                ...param,\n                objectIDs:\n                  items?.map(({ objectID }) => objectID) || param.objectIDs,\n              }).map((payload) => {\n                return { items, payload };\n              }),\n            ],\n            []\n          )\n          .forEach(({ items, payload }) =>\n            sendToInsights('viewedObjectIDs', [payload], items)\n          );\n      }\n    },\n    /**\n     * Sends view events to capture the filters a user uses when viewing.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/viewed-filters/\n     */\n    viewedFilters(...params: Array<WithArbitraryParams<ViewedFiltersParams>>) {\n      if (params.length > 0) {\n        searchInsights('viewedFilters', ...params);\n      }\n    },\n  };\n}\n","import type { InsightsClient } from './types';\n\n/**\n * Determines if a given insights `client` supports the optional call to `init`\n * and the ability to set credentials via extra parameters when sending events.\n */\nexport function isModernInsightsClient(client: InsightsClient): boolean {\n  const [major, minor] = (client.version || '').split('.').map(Number);\n\n  /* eslint-disable @typescript-eslint/camelcase */\n  const v3 = major >= 3;\n  const v2_4 = major === 2 && minor >= 4;\n  const v1_10 = major === 1 && minor >= 10;\n\n  return v3 || v2_4 || v1_10;\n  /* eslint-enable @typescript-eslint/camelcase */\n}\n","import {\n  AlgoliaInsightsHit,\n  InsightsParamsWithItems,\n  ViewedObjectIDsParams,\n} from './types';\n\ntype CreateViewedEventsParams = {\n  items: AlgoliaInsightsHit[];\n};\n\nexport function createViewedEvents({\n  items,\n}: CreateViewedEventsParams): Array<\n  Omit<InsightsParamsWithItems<ViewedObjectIDsParams>, 'eventName'>\n> {\n  const itemsByIndexName = items.reduce<Record<string, AlgoliaInsightsHit[]>>(\n    (acc, current) => {\n      acc[current.__autocomplete_indexName] = (\n        acc[current.__autocomplete_indexName] ?? []\n      ).concat(current);\n\n      return acc;\n    },\n    {}\n  );\n\n  return Object.keys(itemsByIndexName).map((indexName) => {\n    const items = itemsByIndexName[indexName];\n\n    return {\n      index: indexName,\n      items,\n      algoliaSource: ['autocomplete'],\n    };\n  });\n}\n","import { AlgoliaInsightsHit } from './types';\n\nexport function isAlgoliaInsightsHit(hit: any): hit is AlgoliaInsightsHit {\n  return (\n    hit.objectID && hit.__autocomplete_indexName && hit.__autocomplete_queryID\n  );\n}\n","import {\n  AutocompleteState,\n  AutocompletePlugin,\n  createRef,\n  debounce,\n  isEqual,\n  noop,\n  safelyRunOnBrowser,\n} from '@algolia/autocomplete-shared';\nimport {\n  AutocompleteContext,\n  AutocompleteReshapeSource,\n} from '@algolia/autocomplete-shared/dist/esm/core';\n\nimport { createClickedEvent } from './createClickedEvent';\nimport { createSearchInsightsApi } from './createSearchInsightsApi';\nimport { createViewedEvents } from './createViewedEvents';\nimport { isAlgoliaInsightsHit } from './isAlgoliaInsightsHit';\nimport {\n  AlgoliaInsightsHit,\n  AutocompleteInsightsApi,\n  InsightsClient,\n  OnActiveParams,\n  OnItemsChangeParams,\n  OnSelectParams,\n} from './types';\n\nconst VIEW_EVENT_DELAY = 400;\nconst ALGOLIA_INSIGHTS_VERSION = '2.6.0';\nconst ALGOLIA_INSIGHTS_SRC = `https://cdn.jsdelivr.net/npm/search-insights@${ALGOLIA_INSIGHTS_VERSION}/dist/search-insights.min.js`;\n\ntype SendViewedObjectIDsParams = {\n  onItemsChange(params: OnItemsChangeParams): void;\n  items: AlgoliaInsightsHit[];\n  insights: AutocompleteInsightsApi;\n  state: AutocompleteState<any>;\n};\n\nconst sendViewedObjectIDs = debounce<SendViewedObjectIDsParams>(\n  ({ onItemsChange, items, insights, state }) => {\n    onItemsChange({\n      insights,\n      insightsEvents: createViewedEvents({ items }).map((event) => ({\n        eventName: 'Items Viewed',\n        ...event,\n      })),\n      state,\n    });\n  },\n  VIEW_EVENT_DELAY\n);\n\nexport type CreateAlgoliaInsightsPluginParams = {\n  /**\n   * The initialized Search Insights client.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-insightsclient\n   */\n  insightsClient?: InsightsClient;\n  /**\n   * Hook to send an Insights event when the items change.\n   *\n   * By default, it sends a `viewedObjectIDs` event.\n   *\n   * In as-you-type experiences, items change as the user types. This hook is debounced every 400ms to reflect actual items that users notice and avoid generating too many events for items matching \"in progress\" queries.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-onitemschange\n   */\n  onItemsChange?(params: OnItemsChangeParams): void;\n  /**\n   * Hook to send an Insights event when an item is selected.\n   *\n   * By default, it sends a clickedObjectIDsAfterSearch event.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-onselect\n   */\n  onSelect?(params: OnSelectParams): void;\n  /**\n   * Hook to send an Insights event when an item is active.\n   *\n   * By default, it doesn't send any events.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-algolia-insights/createAlgoliaInsightsPlugin/#param-onactive\n   */\n  onActive?(params: OnActiveParams): void;\n  /**\n   * @internal\n   */\n  __autocomplete_clickAnalytics?: boolean;\n};\n\nexport function createAlgoliaInsightsPlugin(\n  options: CreateAlgoliaInsightsPluginParams\n): AutocompletePlugin<any, undefined> {\n  const {\n    insightsClient: providedInsightsClient,\n    onItemsChange,\n    onSelect: onSelectEvent,\n    onActive: onActiveEvent,\n    __autocomplete_clickAnalytics,\n  } = getOptions(options);\n  let insightsClient = providedInsightsClient as InsightsClient;\n\n  if (!providedInsightsClient) {\n    safelyRunOnBrowser(({ window }) => {\n      const pointer = window.AlgoliaAnalyticsObject || 'aa';\n\n      if (typeof pointer === 'string') {\n        insightsClient = window[pointer];\n      }\n\n      if (!insightsClient) {\n        window.AlgoliaAnalyticsObject = pointer;\n\n        if (!window[pointer]) {\n          window[pointer] = (...args: any[]) => {\n            if (!window[pointer].queue) {\n              window[pointer].queue = [];\n            }\n\n            window[pointer].queue.push(args);\n          };\n        }\n\n        window[pointer].version = ALGOLIA_INSIGHTS_VERSION;\n\n        insightsClient = window[pointer];\n\n        loadInsights(window);\n      }\n    });\n  }\n\n  // We return an empty plugin if `insightsClient` is still undefined at\n  // this stage, which can happen in server environments.\n  if (!insightsClient) {\n    return {};\n  }\n\n  const insights = createSearchInsightsApi(insightsClient);\n  const previousItems = createRef<AlgoliaInsightsHit[]>([]);\n\n  const debouncedOnStateChange = debounce<{\n    state: AutocompleteState<any>;\n  }>(({ state }) => {\n    if (!state.isOpen) {\n      return;\n    }\n\n    const items = state.collections\n      .reduce<unknown[]>((acc, current) => {\n        return [...acc, ...current.items];\n      }, [])\n      .filter(isAlgoliaInsightsHit);\n\n    if (\n      !isEqual(\n        previousItems.current.map((x) => x.objectID),\n        items.map((x) => x.objectID)\n      )\n    ) {\n      previousItems.current = items;\n\n      if (items.length > 0) {\n        sendViewedObjectIDs({ onItemsChange, items, insights, state });\n      }\n    }\n  }, 0);\n\n  return {\n    name: 'aa.algoliaInsightsPlugin',\n    subscribe({ setContext, onSelect, onActive }) {\n      function setInsightsContext(userToken?: string) {\n        setContext({\n          algoliaInsightsPlugin: {\n            __algoliaSearchParameters: {\n              ...(__autocomplete_clickAnalytics\n                ? { clickAnalytics: true }\n                : {}),\n              ...(userToken ? { userToken } : {}),\n            },\n            insights,\n          },\n        });\n      }\n\n      insightsClient('addAlgoliaAgent', 'insights-plugin');\n\n      setInsightsContext();\n      insightsClient('onUserTokenChange', setInsightsContext);\n      insightsClient('getUserToken', null, (_error, userToken) => {\n        setInsightsContext(userToken);\n      });\n\n      onSelect(({ item, state, event, source }) => {\n        if (!isAlgoliaInsightsHit(item)) {\n          return;\n        }\n\n        onSelectEvent({\n          state: state as AutocompleteState<any>,\n          event,\n          insights,\n          item,\n          insightsEvents: [\n            {\n              eventName: 'Item Selected',\n              ...createClickedEvent({\n                item,\n                items: (source as AutocompleteReshapeSource<any>)\n                  .getItems()\n                  .filter(isAlgoliaInsightsHit),\n              }),\n            },\n          ],\n        });\n      });\n\n      onActive(({ item, source, state, event }) => {\n        if (!isAlgoliaInsightsHit(item)) {\n          return;\n        }\n\n        onActiveEvent({\n          state: state as AutocompleteState<any>,\n          event,\n          insights,\n          item,\n          insightsEvents: [\n            {\n              eventName: 'Item Active',\n              ...createClickedEvent({\n                item,\n                items: (source as AutocompleteReshapeSource<any>)\n                  .getItems()\n                  .filter(isAlgoliaInsightsHit),\n              }),\n            },\n          ],\n        });\n      });\n    },\n    onStateChange({ state }) {\n      debouncedOnStateChange({ state: state as AutocompleteState<any> });\n    },\n    __autocomplete_pluginOptions: options,\n  };\n}\n\nfunction getAlgoliaSources(\n  algoliaSourceBase: string[] = [],\n  context: AutocompleteContext\n) {\n  return [\n    ...algoliaSourceBase,\n    'autocomplete-internal',\n    ...((context.algoliaInsightsPlugin as Record<string, unknown>)\n      ?.__automaticInsights\n      ? ['autocomplete-automatic']\n      : []),\n  ];\n}\n\nfunction getOptions(options: CreateAlgoliaInsightsPluginParams) {\n  return {\n    onItemsChange({ insights, insightsEvents, state }: OnItemsChangeParams) {\n      insights.viewedObjectIDs(\n        ...insightsEvents.map((event) => ({\n          ...event,\n          algoliaSource: getAlgoliaSources(event.algoliaSource, state.context),\n        }))\n      );\n    },\n    onSelect({ insights, insightsEvents, state }: OnSelectParams) {\n      insights.clickedObjectIDsAfterSearch(\n        ...insightsEvents.map((event) => ({\n          ...event,\n          algoliaSource: getAlgoliaSources(event.algoliaSource, state.context),\n        }))\n      );\n    },\n    onActive: noop,\n    __autocomplete_clickAnalytics: true,\n    ...options,\n  };\n}\n\nfunction loadInsights(environment: typeof window) {\n  const errorMessage = `[Autocomplete]: Could not load search-insights.js. Please load it manually following https://alg.li/insights-autocomplete`;\n\n  try {\n    const script = environment.document.createElement('script');\n    script.async = true;\n    script.src = ALGOLIA_INSIGHTS_SRC;\n\n    script.onerror = () => {\n      // eslint-disable-next-line no-console\n      console.error(errorMessage);\n    };\n\n    document.body.appendChild(script);\n  } catch (cause) {\n    // eslint-disable-next-line no-console\n    console.error(errorMessage);\n  }\n}\n","/**\n * Safely runs code meant for browser environments only.\n */\nexport function safelyRunOnBrowser(callback) {\n  if (typeof window !== 'undefined') {\n    return callback({\n      window: window\n    });\n  }\n  return undefined;\n}","export function createRef(initialValue) {\n  return {\n    current: initialValue\n  };\n}"],"names":["debounce","fn","time","timerId","undefined","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","isPrimitive","obj","Object","isEqual","first","second","keys","_i","_Object$keys","key","noop","createClickedEvent","_ref","item","_ref$items","items","index","__autocomplete_indexName","positions","findIndex","x","objectID","queryID","__autocomplete_queryID","algoliaSource","chunk","chunkSize","chunks","i","objectIDs","push","_objectSpread","slice","mapToInsightsParamsApi","params","map","param","_objectWithoutProperties","_excluded","_ref2","createSearchInsightsApi","searchInsights","_split$map2","major","minor","canSendHeaders","_slicedToArray","version","split","Number","sendToInsights","method","payloads","_items$0$__autocomple","__autocomplete_algoliaCredentials","headers","appId","apiKey","concat","_toConsumableArray","init","setUserToken","userToken","clickedObjectIDsAfterSearch","clickedObjectIDs","_len2","_key2","clickedFilters","_len3","_key3","convertedObjectIDsAfterSearch","_len4","_key4","convertedObjectIDs","_len5","_key5","convertedFilters","_len6","_key6","viewedObjectIDs","_len7","_key7","reduce","acc","_ref3","_excluded2","_ref4","payload","forEach","_ref5","viewedFilters","_len8","_key8","createViewedEvents","itemsByIndexName","current","_acc$current$__autoco","indexName","isAlgoliaInsightsHit","hit","ALGOLIA_INSIGHTS_VERSION","ALGOLIA_INSIGHTS_SRC","sendViewedObjectIDs","onItemsChange","insights","state","insightsEvents","event","eventName","getAlgoliaSources","_context$algoliaInsig","algoliaSourceBase","context","algoliaInsightsPlugin","__automaticInsights","options","_getOptions","_ref8","onSelect","_ref9","onActive","__autocomplete_clickAnalytics","getOptions","providedInsightsClient","insightsClient","onSelectEvent","onActiveEvent","callback","window","safelyRunOnBrowser","pointer","AlgoliaAnalyticsObject","queue","environment","errorMessage","script","document","createElement","async","src","onerror","console","error","body","appendChild","cause","loadInsights","previousItems","debouncedOnStateChange","isOpen","collections","filter","name","subscribe","setContext","setInsightsContext","__algoliaSearchParameters","clickAnalytics","_error","source","getItems","_ref6","onStateChange","_ref7","__autocomplete_pluginOptions"],"mappings":"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"}